{"version":3,"file":"sentry-core.module.js","sourceRoot":"/","sources":["sentry-core.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,2CAM0B;AAMxB,gEAGmC;AACrC,8DAA0D;AAC1D,sDAA0D;AAC1D,mEAAqE;AAIrE,IAAa,gBAAgB,wBAA7B,MAAa,gBAAgB;IAElB,MAAM,CAAC,OAAO,CAAC,OAA4B;QAC9C,MAAM,QAAQ,GAAG,wCAAqB,CAAC,OAAO,CAAC,CAAC;QAEhD,OAAO;YACH,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;SACvC,CAAC;IACN,CAAC;IAEM,MAAM,CAAC,YAAY,CACtB,OAAiC;QAEjC,MAAM,QAAQ,GAAa;YACvB,MAAM,EAAE,CAAC,wCAAqB,CAAC;YAC/B,OAAO,EAAE,+BAAY;YACrB,UAAU,EAAE,CAAC,OAA4B,EAAE,EAAE,CACzC,gCAAkB,CAAC,OAAO,CAAC;SAClC,CAAC;QAEF,OAAO;YACH,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;YAClC,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,MAAM,EAAE,kBAAgB;YACxB,SAAS,EAAE;gBACP,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;gBACrC,QAAQ;gBACR,8BAAa;aAChB;SACJ,CAAC;IACN,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAC/B,OAAiC;QAEjC,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC7C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAsC,CAAC;QAChE,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,QAAQ;gBACjB,QAAQ;aACT;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACvC,OAAiC;QAEjC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,wCAAqB;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CAAC;SACH;QACD,MAAM,MAAM,GAAG;YACb,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAA+B;SACxE,CAAC;QACF,OAAO;YACL,OAAO,EAAE,wCAAqB;YAC9B,UAAU,EAAE,CAAO,cAAoC,EAAE,EAAE,gDACzD,OAAA,MAAM,cAAc,CAAC,yBAAyB,EAAE,CAAA,GAAA;YAClD,MAAM;SACP,CAAC;IACJ,CAAC;CACN,CAAA;AAtEY,gBAAgB;IAF5B,eAAM,EAAE;IACR,eAAM,CAAC,EAAE,CAAC;GACE,gBAAgB,CAsE5B;AAtEY,4CAAgB","sourcesContent":["import {\r\n    Module,\r\n    Global,\r\n    Provider,\r\n    Type,\r\n    DynamicModule,\r\n  } from '@nestjs/common';\r\n  import {\r\n    SentryModuleAsyncOptions,\r\n    SentryOptionsFactory,\r\n    SentryModuleOptions,\r\n  } from './interfaces/sentry-options.interface';\r\n  import {\r\n    SENTRY_MODULE_OPTIONS,\r\n    SENTRY_TOKEN,\r\n  } from './common/sentry.constants';\r\nimport { SentryService } from './services/sentry.service';\r\nimport { createSentryClient } from './common/sentry.util';\r\nimport { createSentryProviders } from './providers/sentry.providers';\r\n\r\n@Global()\r\n@Module({})\r\nexport class SentryCoreModule {\r\n\r\n    public static forRoot(options: SentryModuleOptions): DynamicModule {\r\n        const provider = createSentryProviders(options);\r\n\r\n        return {\r\n            exports: [provider, SentryService],\r\n            module: SentryCoreModule,\r\n            providers: [provider, SentryService],\r\n        };\r\n    }\r\n\r\n    public static forRootAsync(\r\n        options: SentryModuleAsyncOptions,\r\n    ): DynamicModule {\r\n        const provider: Provider = {\r\n            inject: [SENTRY_MODULE_OPTIONS],\r\n            provide: SENTRY_TOKEN,\r\n            useFactory: (options: SentryModuleOptions) =>\r\n                createSentryClient(options),\r\n        };\r\n\r\n        return {\r\n            exports: [provider, SentryService],\r\n            imports: options.imports,\r\n            module: SentryCoreModule,\r\n            providers: [\r\n                ...this.createAsyncProviders(options),\r\n                provider,\r\n                SentryService,\r\n            ],\r\n        };\r\n    }\r\n\r\n    private static createAsyncProviders(\r\n        options: SentryModuleAsyncOptions,\r\n      ): Provider[] {\r\n        if (options.useExisting || options.useFactory) {\r\n          return [this.createAsyncOptionsProvider(options)];\r\n        }\r\n        const useClass = options.useClass as Type<SentryOptionsFactory>;\r\n        return [\r\n          this.createAsyncOptionsProvider(options),\r\n          {\r\n            provide: useClass,\r\n            useClass,\r\n          },\r\n        ];\r\n      }\r\n    \r\n      private static createAsyncOptionsProvider(\r\n        options: SentryModuleAsyncOptions,\r\n      ): Provider {\r\n        if (options.useFactory) {\r\n          return {\r\n            inject: options.inject || [],\r\n            provide: SENTRY_MODULE_OPTIONS,\r\n            useFactory: options.useFactory,\r\n          };\r\n        }\r\n        const inject = [\r\n          (options.useClass || options.useExisting) as Type<SentryOptionsFactory>,\r\n        ];\r\n        return {\r\n          provide: SENTRY_MODULE_OPTIONS,\r\n          useFactory: async (optionsFactory: SentryOptionsFactory) =>\r\n            await optionsFactory.createSentryModuleOptions(),\r\n          inject,\r\n        };\r\n      }\r\n}"]}