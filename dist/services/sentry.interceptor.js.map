{"version":3,"file":"sentry.interceptor.js","sourceRoot":"/","sources":["services/sentry.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { CallHandler, ExecutionContext, Injectable, NestInterceptor, Inject } from '@nestjs/common';\r\nimport { Observable, TimeoutError } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { SENTRY_TOKEN, InjectSentry } from '../common';\r\nimport { SentryService } from './sentry.service';\r\nimport { Scope } from '@sentry/hub';\r\nimport { HttpArgumentsHost, ContextType, WsArgumentsHost, RpcArgumentsHost } from '@nestjs/common/interfaces';\r\nimport { Handlers } from '@sentry/node';\r\nimport { SentryInterceptorOptions, SentryFilterFunction, SentryInterceptorOptionsFilter } from '../interfaces/sentry-interceptor.interface';\r\n\r\n@Injectable()\r\nexport class SentryInterceptor implements NestInterceptor {\r\n\r\n  constructor(\r\n    @InjectSentry() private readonly client: SentryService,\r\n    private readonly options?: SentryInterceptorOptions) {}\r\n\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    // first param would be for events, second is for errors\r\n    return next.handle().pipe(\r\n      tap(null, (exception) => {\r\n        if (this.shouldReport(exception)) {\r\n          this.client.instance().withScope((scope) => {\r\n            switch (context.getType<ContextType>()) {\r\n              case 'http':\r\n                return this.captureHttpException(\r\n                  scope, \r\n                  context.switchToHttp(), \r\n                  exception\r\n                );\r\n              case 'rpc':\r\n                return this.captureRpcException(\r\n                  scope,\r\n                  context.switchToRpc(),\r\n                  exception,\r\n                );\r\n              case 'ws':\r\n                return this.captureWsException(\r\n                  scope,\r\n                  context.switchToWs(),\r\n                  exception,\r\n                );\r\n            }\r\n          })\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private captureHttpException(scope: Scope, http: HttpArgumentsHost, exception: any): void {\r\n    const data = Handlers.parseRequest(<any>{},http.getRequest(), this.options);\r\n\r\n    scope.setExtra('req', data.request);\r\n    data.extra && scope.setExtras(data.extra);\r\n    if (data.user) scope.setUser(data.user);\r\n\r\n    this.captureException(scope, exception);\r\n  }\r\n\r\n  private captureRpcException(\r\n    scope: Scope,\r\n    rpc: RpcArgumentsHost,\r\n    exception: any,\r\n  ): void {\r\n    scope.setExtra('rpc_data', rpc.getData());\r\n\r\n    this.captureException(scope, exception);\r\n  }\r\n\r\n  private captureWsException(\r\n    scope: Scope,\r\n    ws: WsArgumentsHost,\r\n    exception: any,\r\n  ): void {\r\n    scope.setExtra('ws_client', ws.getClient());\r\n    scope.setExtra('ws_data', ws.getData());\r\n\r\n    this.captureException(scope, exception);\r\n  }\r\n\r\n  private captureException(scope: Scope, exception: any): void {\r\n    if (this.options) {\r\n      if (this.options.level) scope.setLevel(this.options.level);\r\n      if (this.options.fingerprint)\r\n        scope.setFingerprint(this.options.fingerprint);\r\n      if (this.options.extra) scope.setExtras(this.options.extra);\r\n      if (this.options.tags) scope.setTags(this.options.tags);\r\n    }\r\n\r\n    this.client.instance().captureException(exception);\r\n  }\r\n\r\n  private shouldReport(exception: any) {\r\n    if (this.options && !this.options.filters) return true;\r\n\r\n    // If all filters pass, then we do not report\r\n    if (this.options) {\r\n      const opts: SentryInterceptorOptions = this.options as {}\r\n      if (opts.filters) {\r\n        let filters: SentryInterceptorOptionsFilter[] = opts.filters\r\n        return filters.every(({ type, filter }) => {\r\n          return !(exception instanceof type && (!filter || filter(exception)));\r\n        });\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n"]}