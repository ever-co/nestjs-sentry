{"version":3,"file":"sentry-service.interface.js","sourceRoot":"/","sources":["interfaces/sentry-service.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Breadcrumb, Severity, Scope, User } from \"@sentry/node\";\r\n\r\nexport interface ISentryService {\r\n    /**\r\n      * Records a new breadcrumb which will be attached to future events.\r\n      *\r\n      * Breadcrumbs will be added to subsequent events to provide more context on\r\n      * user's actions prior to an error or crash.\r\n      *\r\n      * @param breadcrumb The breadcrumb to record.\r\n    */\r\n    addBreadcrumb(breadcrumb: Breadcrumb): void;\r\n    /**\r\n      * Captures an exception event and sends it to Sentry.\r\n      *\r\n      * @param exception An exception-like object.\r\n      * @returns The generated eventId.\r\n    */\r\n    captureException(exception: any): string;\r\n    /**\r\n      * Captures a manually created event and sends it to Sentry.\r\n      *\r\n      * @param event The event to send to Sentry.\r\n      * @returns The generated eventId.\r\n    */\r\n    captureEvent(event: Event): string;\r\n    /**\r\n      * Callback to set context information onto the scope.\r\n      * @param callback Callback function that receives Scope.\r\n    */\r\n    configureScope(callback: (scope: Scope) => void): void;\r\n    /**\r\n      * Captures a message event and sends it to Sentry.\r\n      *\r\n      * @param message The message to send to Sentry.\r\n      * @param level Define the level of the message.\r\n      * @returns The generated eventId.\r\n    */\r\n    captureMessage(message: string, level?: Severity|undefined): string;\r\n    /**\r\n      * Sets context data with the given name.\r\n      * @param name of the context\r\n      * @param context Any kind of data. This data will be normailzed.\r\n    */\r\n    setContext(name: string, context: {\r\n      [key: string]: any;\r\n    } | null): void;\r\n    /**\r\n      * Set an object that will be merged sent as extra data with the event.\r\n      * @param extras Extras object to merge into current context.\r\n    */\r\n    setExtras(extras: {\r\n      [key: string]: any;\r\n    }): void;\r\n    /**\r\n      * Set an object that will be merged sent as tags data with the event.\r\n      * @param tags Tags context object to merge into current context.\r\n    */\r\n    setTags(tags: {\r\n      [key: string]: string;\r\n    }): void;\r\n    /**\r\n      * Set key:value that will be sent as extra data with the event.\r\n      * @param key String of extra\r\n      * @param extra Any kind of data. This data will be normailzed.\r\n    */\r\n    setExtra(key: string, extra: any): void;\r\n    /**\r\n      * Set key:value that will be sent as tags data with the event.\r\n      * @param key String key of tag\r\n      * @param value String value of tag\r\n    */\r\n    setTag(key: string, value: string): void;\r\n    /**\r\n      * Updates user context information for future events.\r\n      *\r\n      * @param user User context object to be set in the current context. Pass `null` to unset the user.\r\n    */\r\n    setUser(user: User | null): void;\r\n    /**\r\n      * Creates a new scope with and executes the given operation within.\r\n      * The scope is automatically removed once the operation\r\n      * finishes or throws.\r\n      *\r\n      * This is essentially a convenience function for:\r\n      *\r\n      *     pushScope();\r\n      *     callback();\r\n      *     popScope();\r\n      *\r\n      * @param callback that will be enclosed into push/popScope.\r\n    */\r\n    withScope(callback: (scope: Scope) => void): void;\r\n    /**\r\n      * Calls a function on the latest client. Use this with caution, it's meant as\r\n      * in \"internal\" helper so we don't need to expose every possible function in\r\n      * the shim. It is not guaranteed that the client actually implements the\r\n      * function.\r\n      *\r\n      * @param method The method to call on the client/client.\r\n      * @param args Arguments to pass to the client/fontend.\r\n    */\r\n    _callOnClient(method: string, ...args: any[]): void;\r\n  }"]}